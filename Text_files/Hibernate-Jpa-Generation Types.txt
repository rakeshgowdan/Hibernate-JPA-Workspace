Simple Identifiers
The most straightforward way to define an identifier is by using the @Id annotation.

Simple ids are mapped using @Id to a single property of one of these types: 
Java primitive and primitive wrapper types, String, Date, BigDecimal, BigInteger.

Let's see a quick example of defining an entity with a primary key of type long:

@Entity
public class Student {
 
    @Id
    private long studentId;
    
    // standard constructor, getters, setters
}
------------------------------------------------------------------------------------
Generated Identifiers
If we want the primary key value to be generated automatically for us, 
we can add the @GeneratedValue annotation.

This can use 4 generation types: AUTO, IDENTITY, SEQUENCE, TABLE.

If we don't specify a value explicitly, the generation type defaults to AUTO.

If we don't specify a value explicitly, the generation type defaults to AUTO.

AUTO Generation
If we're using the default generation type, the persistence provider will determine values based on the type 
of the primary key attribute. This type can be numerical or UUID.

For numeric values, the generation is based on a sequence or table generator, while UUID values will use the UUIDGenerator.

Let's see an example of mapping an entity primary key using AUTO generation strategy:

@Entity
public class Student {
 
    @Id
    @GeneratedValue
    private long studentId;
 
    // ...
}
In this case, the primary key values will be unique at the database level.

IDENTITY Generation
This type of generation relies on the IdentityGenerator which expects 
values generated by an identity column in the database, 
meaning they are auto-incremented.

To use this generation type, we only need to set the strategy parameter:

@Entity
public class Student {
 
    @Id
    @GeneratedValue (strategy = GenerationType.IDENTITY)
    private long studentId;
 
    // ...
}
One thing to note is that IDENTITY generation disables batch updates.

@EmbeddedId
To define an id using @EmbeddedId, first we need a primary key class 
annotated with @Embeddable:

@Embeddable
public class OrderEntryPK implements Serializable {
 
    private long orderId;
    private long productId;
 
    // standard constructor, getters, setters
    // equals() and hashCode() 
}
Next, we can add an id of type OrderEntryPK to an entity using @EmbeddedId:

@Entity
public class OrderEntry {
 
    @EmbeddedId
    private OrderEntryPK entryId;
 
    // ...
}
Let's see how we can use this type of composite id to set the primary key for an entity:

@Test
public void whenSaveCompositeIdEntity_thenOk() {
    OrderEntryPK entryPK = new OrderEntryPK();
    entryPK.setOrderId(1L);
    entryPK.setProductId(30L);
        
    OrderEntry entry = new OrderEntry();
    entry.setEntryId(entryPK);
    
}
Here the OrderEntry object has an OrderEntryPK primary id formed of two attributes: 
orderId and productId.